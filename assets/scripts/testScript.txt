#Test script

#   <-- Signifies a comment

#Registers:
#R00 - R31 - General-purpose - IDs 0x00 to 0x1F
#RPC -  Program Counter - ID 0x20
#RSP - Stack Pointer - ID 0x21
#RER - Error Register - ID 0x22
#RST - Status Register - ID 0x23
#All registers are 32 bits wide
#Any register ID beyond 0x23 is reserved

#Memory block:
#0xFF length, each field 32 bits wide
#M000 - M255

#Execution starts at top of file

#Instruction encoding
#Byte 0x00 - Instruction group
#Byte 0x01 - Instruction in group
#Byte 0x02-... - Operands

#Label encoding: 0x04 length, pointer to label's address

#Label encoding:
# 0x04 length, pointer to instruction in instruction memory

#Value encoding:
#If constant:
# 0x05 length, byte 0x00 is 0x00
# Next 0x04 bytes are the value
#If register:
# 0x02 length, byte 0x00 is 0x01
# Next byte is register ID
#If memory:
# 0x02 length, byte 0x00 is 0x02
# Next byte is memory offset

#Group 0x00 - Debug Instructions:
#0x00 - NOP - No operation
#0x01 - DUMPSTATE - Dump the state to the game log

#Group 0x01 - Branching Instructions:
#0x00 - JUMP label - Jump to a label
#0x01 - GOSUB label - Jump to a subroutine label
#0x02 - RETURN - Return from a subroutine call

#Group 0x02 - Arithmetic operations:
#0x00 - INC register/memory - Increment the value in a register or memory block location

#Label definition:
#.LABEL name - Creates a label of name "name"

#Example encoding:
#.LABEL loop - "loop" points to instruction memory offset 0x00000000, since it is the first line
#INC M000 - Increment memory block offset 0x00 --- 0x02 0x00 0x02 0x00
#INC R0 - Increment general-purpose register 0 - 0x02 0x00 0x01 0x00
#DUMPSTATE - Dump the state to the game log - 0x00 0x01
#JUMP loop - Jump to the "loop" label - 0x01 0x00 0x00000000

.LABEL loop
INC M000
INC R0
DUMPSTATE
JUMP loop